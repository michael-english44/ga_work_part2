{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img src=\"http://imgur.com/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\">\n",
    "\n",
    "# Linear Regression Review Lab\n",
    "\n",
    "_Authors: Alexander Combs (NYC)_\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('fivethirtyeight')\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Create a Python dictionary \n",
    "\n",
    "- Use the following as the keys: 'X' and 'Y'\n",
    "- Create two lists to use as the values in the dictionary: <br>\n",
    "    for 'X': 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <br>\n",
    "    for 'Y': .5, .7, .8, .99, 1, 1.4, 1.8, 2.1, 2.4, 2.9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:\n",
    "my_dict = {'X': [i for i in range(1, 11)], 'Y': [.5, .7, .8, .99, 1, 1.4, 1.8, 2.1, 2.4, 2.9]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Using that dictionary, create a pandas DataFrame and call it pre_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:\n",
    "pre_df = pd.DataFrame(my_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using the Series from the DataFrame, create two new series\n",
    "\n",
    "- The first list should use the 'X' values and add 10 to each value\n",
    "- The second list should use the 'Y' values and add 3 to each\n",
    "- Add those new lists to a new DataFrame and save it as new_data (hint: zip())\n",
    "\n",
    "Note: the original DataFrame should be unchanged (don't save to pre_df as new columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:\n",
    "new_data = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_data['x2'] = pre_df['X'] + 10\n",
    "new_data['y2'] = pre_df['Y'] + 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using pd.concat, vertically concat the new DataFrame, new_data, to the original pre_df DataFrame. Save it as df.\n",
    "\n",
    "Hint: Be mindful of your column names, and make sure your index is 0-based and continuous."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x2</th>\n",
       "      <th>y2</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11</td>\n",
       "      <td>3.50</td>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "      <td>3.70</td>\n",
       "      <td>2</td>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>3.80</td>\n",
       "      <td>3</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14</td>\n",
       "      <td>3.99</td>\n",
       "      <td>4</td>\n",
       "      <td>0.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15</td>\n",
       "      <td>4.00</td>\n",
       "      <td>5</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x2    y2  X     Y\n",
       "0  11  3.50  1  0.50\n",
       "1  12  3.70  2  0.70\n",
       "2  13  3.80  3  0.80\n",
       "3  14  3.99  4  0.99\n",
       "4  15  4.00  5  1.00"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A:\n",
    "df = pd.concat([new_data, pre_df], axis = 1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Plot the df DataFrame using pandas + matplotlib\n",
    "\n",
    "- Set the figure size to 12 wide and 6 height\n",
    "- Add a title, 'X vs Y' to the plot\n",
    "- Set the size of the markers to 50 and the color of the markers to black"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A:\n",
    "df.plot.scatter('X', 'Y', s = 50, c = 'black', title = 'X vs. Y', figsize = (12, 6));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using statsmodels, fit an OLS regression to your data and print our the summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A:\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lr = LinearRegression()\n",
    "lr.fit(df[['X']], df.Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.25957576])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0313333333333341"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the model you fitted, answer the folowing questions:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is the R-squared for the model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9496906608906868"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A:\n",
    "lr.score(df[['X']], df.Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using the above, write the equation for our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sympy as sy\n",
    "ans = 'The equation for the model is y = {:.3f}x + {:.3f}'.format(float(lr.coef_), float(lr.intercept_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The equation for the model is y = 0.260x + 0.031\n"
     ]
    }
   ],
   "source": [
    "sy.pprint(ans)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solve the equation for an x of 20 then 21 (by hand/calculator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of my prediction for 20 is [5.22284848]\n",
      "The value of my prediction for 21 is [5.48242424]\n"
     ]
    }
   ],
   "source": [
    "# A\n",
    "sy.init_printing()\n",
    "def predictor(x): return lr.coef_*x + lr.intercept_\n",
    "print('The value of my prediction for {} is {}'.format(20, predictor(20)))\n",
    "print('The value of my prediction for {} is {}'.format(21, predictor(21)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using the predict functionality of statsmodels, predict the values for 20 and 21\n",
    "\n",
    "Hint: You'll need to use a list - don't forget your intercept!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5.22284848, 5.48242424])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A:\n",
    "lr.predict(np.array([[20], [21]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the SSE by using the predictions for every X (y_hats) and the true y values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "diff = (lr.predict(df[['X']]) - df['Y'])**2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now plot your predictions for every X\n",
    "\n",
    "- Plot the predictions as a line and the true y values using a scatterplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a2819bd30>]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A:\n",
    "plt.scatter(df.X, df.Y)\n",
    "plt.plot(df.X, lr.predict(df[['X']]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import PolynomialFeatures from sklearn. Then do the following:\n",
    "\n",
    "- Instantiate a PolynomialFeatures object and save it as poly\n",
    "- Documentation is [here](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html)\n",
    "- Use degree=5 (Hint: If that gives you more than 6 columns, you forgot to remove something)\n",
    "- Use fit_transform on X to create a numpy array of polynomial features\n",
    "- Save that array as poly_feats\n",
    "- Convert this array to a DataFrame and save it as poly_X\n",
    "- Join this new poly_df DataFrame with df['Y'] using pd.merge (Hint: join on the index)\n",
    "- Save this joined index as pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "feats = PolynomialFeatures(degree = 5)\n",
    "poly_feats = feats.fit_transform(df[['X']])\n",
    "\n",
    "poly_X = pd.DataFrame(poly_feats) \n",
    "\n",
    "pdf = pd.merge(df, poly_X, on = df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key_0</th>\n",
       "      <th>x2</th>\n",
       "      <th>y2</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>3.50</td>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>3.70</td>\n",
       "      <td>2</td>\n",
       "      <td>0.70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>3.80</td>\n",
       "      <td>3</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>243.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "      <td>3.99</td>\n",
       "      <td>4</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>1024.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>4.00</td>\n",
       "      <td>5</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>625.0</td>\n",
       "      <td>3125.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   key_0  x2    y2  X     Y    0    1     2      3      4       5\n",
       "0      0  11  3.50  1  0.50  1.0  1.0   1.0    1.0    1.0     1.0\n",
       "1      1  12  3.70  2  0.70  1.0  2.0   4.0    8.0   16.0    32.0\n",
       "2      2  13  3.80  3  0.80  1.0  3.0   9.0   27.0   81.0   243.0\n",
       "3      3  14  3.99  4  0.99  1.0  4.0  16.0   64.0  256.0  1024.0\n",
       "4      4  15  4.00  5  1.00  1.0  5.0  25.0  125.0  625.0  3125.0"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = pdf[['X', 0, 1, 2, 3, 4, 5]]\n",
    "Y = pdf.Y\n",
    "lr.fit(X, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Print out the model's predictions and save them as poly_yhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:\n",
    "poly_yhat = lr.predict(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the SSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:\n",
    "sse = (poly_yhat - pdf['Y'])**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a28506e80>]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sse, 'o')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now, create a for loop that does the follow:\n",
    "\n",
    "- Iterates over the following alpha values [0, .001, .01, .25, .5, 1, 10]\n",
    "- In each loop, you are going to fit a regularized regression\n",
    "- See [Statsmodels Docs](http://statsmodels.sourceforge.net/devel/generated/statsmodels.regression.linear_model.OLS.fit_regularized.html) to understand how to do this\n",
    "- In each loop, set the value of alpha to the value of being iterated over\n",
    "- Set the L1_wt parameter to 0\n",
    "- In each loop print out the alpha value, the SSE, and the mean absolute value of the coefficient of the model\n",
    "- You should also print out the predictions as a line and the true y's as a scatterplot as above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# A:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using the output of the above, answer the following:\n",
    "- What happens to the SSE over the increasing alpha values?\n",
    "- What happens to the mean abs. value of the coefficients?\n",
    "- Does increasing the bias to reduce variance always mean a better model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# A:"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
